Brian Bowden || 10060818
December 5, 2018
CPSC418 - Assignment 3
------------------------------------------------------------------------------
Files included:

Client.java // client side source file for this assignment
CryptoUtilities.java // a toolkit for AES encryption and HMAC
Makefile // Simple Java Makefile
plain.txt // for testing purposes with encryption
PrimeGenerator.java // a class designed to do backend work with primes and BigInteger
README // this document
Server.java // server side (and multi-threader) source file for this assignment 
ServerThread.java // child thread source file for server side
------------------------------------------------------------------------------
NOTES:
	I tested this using port 6666 and IP address 0.0.0.0
------------------------------------------------------------------------------
No KNOWN bugs...
----------------------tested using secondary terminal-------------------------
Compile both files with make
	
in one terminal: (server side) (debug)
	java Server [Port #] [debug] 
							   (no debug)
	java Server [Port #] [<text>]							   

in second terminal: (client side) (debug)
	java Client [IP-Address] [Port #] [debug]
	                              (no debug)
	java Client [IP-Address] [Port #] [<text>]	                              
	// the IP address will appear on server side terminal, use this
	
port numbers must be equal

The server will wait for client to connect
Once client is connected, server will set up a child thread to wait for input from client

Client will be prompted for its decision/choice via user input from keyboard
	"exit" will kill the thread assigned to it
		if exit is selected and there are no other running processes on server, server will stay on
	"die" will kill all threads associated with the server and shutdown the server
	"send" will prompt the user again:
		generate public key
		send public key to server
		generate private key using the Diffie-Hellman PKC protocol
	
		prompt for file to be encrypted // client will (try to) create this file if it does not exist (it will be empty!)
		prompt for file output //server will (try to) create this file if it does not exist
		
		client reads data from file to be encrypted, hashes it, then encrypts it.
		client sends size of aes-encrypted data 
		and sends aes-encrypted data 
		and sends file output name through socket to server.
		
Server receives input from client:
	"exit" kill thread associated with client calling "exit"
	"die" kill all threads and shutdown server
	"send" prompt server:
		receive public key from client
		generates its own private key using the Diffie-Hellman PKC protocol

		receive file output name // creates file with same name if it does not exist		
		receive size of data buffer
		receive data
			get and put cipher text into a buffer
			decrypt
			verify hash
				if hash is good, extract plaintext
					write plaintext to specified file
					send positive acknowledgement
				else, hash is not good (bad password, other problems etc)
					send negative acknowledgement

Client receives acknowledgement
	"exit" process on either acknowledgement
	
Server stays alive

----------------------------------------------------------------------------------
Encryption done by AES-128-CBC standard with a shared session key between client and server
Data Integrity kept by HMAC-SHA-1 with an appended message digest
----------------------------------------------------------------------------------
Client instantiates Prime Generator to generate the public key {p,g}.
The prime generator uses the BigInteger Java class to achieve this.
It generates one prime, q, then creates another prime, p, asserting 2q+1 is prime.
The generator will then get a primitive root of p, with a primitive root test, this g is relatively small.
The client passes off the public key to the server.
They both generate random integers a,b such that 2 < a,b < p
They each generate a private key using g^i = y_i and sends these keys to each other.
They each receive each others y_i, and then take it to their respective integer for encryption and decryption.   
----------------------------------------------------------------------------------
		
	